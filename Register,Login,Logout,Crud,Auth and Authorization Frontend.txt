

//frontEnd 

npx create-react-app frontend

npm install bootstrap

npm install react-bootstrap bootstrap

npm i axios

npm install react-router-dom

npm install jwt-decode


//components/TodoTable/TodosTable.js

import React, { useEffect, useState } from 'react';
import { fetchTodos, deleteTodo } from '../Services/service';
import TodoForm from '../TodoForm/TodoForm';
import './TodosTable.css'




const TodoTable = () => {
  const [todos, setTodos] = useState([]);
  const [currentTodo, setCurrentTodo] = useState(null);
 

  // Function to load todos
  const loadTodos = async () => {
    try {
      await fetchTodos(setTodos);
    } catch (error) {
      console.error("Error fetching todos:", error);
    }
  };

  useEffect(() => {
    loadTodos();
  }, []);

  // Handle delete button click
  const handleDelete = async (id) => {
    if (window.confirm("Are you sure you want to delete this todo?")) {
      try {
        await deleteTodo(id);
        loadTodos(); // Refresh the list
      } catch (error) {
        console.error("Error deleting todo:", error);
      }
    }
  };
  
  
 

 

  return (
    <div>
    
     <TodoForm
        currentTodo={currentTodo} 
        setCurrentTodo={setCurrentTodo} 
        reloadTodos={loadTodos}
      />

      <table className='tableDesighn'>
        <thead>
          <tr>
            <th>Name</th>
            <th>Mobile</th>
            <th>Email</th>
            <th>Author</th>
            <th>Location</th>
            <th>Actions</th>
          </tr>
        </thead>
        <tbody>
          {todos.length > 0 ? (
            todos.map((item, index) => (
              <tr key={index}>
                <td>{item.name}</td>
                <td>{item.mobile}</td>
                <td>{item.email}</td>
                <td>{item.author}</td>
                <td>{item.location}</td>
                <td>
                <button onClick={() => setCurrentTodo(item)} className='edit'>Edit</button> 


                  <button onClick={() => handleDelete(item._id)} className='delete'>Delete</button>
                </td>
              </tr>
            ))
          ) : (
            <tr>
              <td colSpan="6" style={{ textAlign: 'center' }}>
                No Todos Available
              </td>
            </tr>
          )}
        </tbody>
      </table>
    </div>
  );
};

export default TodoTable;


//components/TodoTable/TodosTable.css


   .tableDesighn {
    margin-top: 3%;
    width: 80%;
    margin-left: 5%;
    border-collapse: collapse; /* Ensures borders collapse into a single line */
  }
 

  table, th, td {
    border: 1px solid !important;
    text-align: left;
  }
  
  th, td {
    padding: 10px; 
  }
  
  .edit, .delete {
    padding: 5px 10px;
    margin: 5px;
    cursor: pointer;
    font-size: 14px;
  }
  
  .edit {
    background-color: #4CAF50; /* Green for edit button */
    color: white;
    border: none;
  }
  
  .delete {
    background-color: #f44336; /* Red for delete button */
    color: white;
    border: none;
  }
  
  .edit:hover, .delete:hover {
    opacity: 0.8; /* Add hover effect */
  }
  
  tr:nth-child(even) {
    background-color: #f2f2f2; /* Light gray for alternate rows */
  }
  
  tr:hover {
    background-color: #ddd; /* Slightly darker gray for row hover */
  }
  

//components/TodoForm/TodoForm.js



import React, { useState, useEffect, useMemo } from 'react';
import { handleUpdate, handleCreate } from '../Services/service';
import './TodoForm.css'
import { useNavigate } from 'react-router-dom';




const TodoForm = ({ currentTodo, setCurrentTodo, reloadTodos }) => {

   
  const initialFormState = useMemo(
    () => ({ id: null, name: '', mobile: '', email: '', author: '', location: '' }),
    []
  );

  const navigate = useNavigate();
  const [todo, setTodo] = useState(initialFormState);
  const [errors, setErrors] = useState({});

  const locations = ['coimbatore', 'chennai', 'bangalore'];

  useEffect(() => {
    if (currentTodo) {
      setTodo(currentTodo); 
    } else {
      setTodo(initialFormState); 
    }
  }, [currentTodo,initialFormState]);

  const handleInputChange = (event) => {
    const { name, value } = event.target;
    setTodo({ ...todo, [name]: value });
  };

  const validateForm = (todo) => {
    let errors = {};
    if (!todo.name) errors.name = 'Name is required';
    if (!todo.mobile) errors.mobile = 'Mobile Number is required';
    if (!todo.email) errors.email = 'Email is required';
    if (!todo.author) errors.author = 'Author is required';
    if (!todo.location) errors.location = 'Location is required';
    return errors;
  };


  

  const handleSubmit = async (event) => {
    event.preventDefault();
  
    const formErrors = validateForm(todo);
    if (Object.keys(formErrors).length > 0) {
      setErrors(formErrors); // Set validation errors if any
      return;
    }
  
    console.log('Submitting Todo:', todo); // Check the data before sending it to the API
  
    try {
      if (currentTodo?._id) {

        await handleUpdate(todo,currentTodo);
        reloadTodos();
       
      } else {
       await handleCreate(todo);
       reloadTodos();
       
      }
  
      
      setTodo(initialFormState);
      setErrors({});
      setCurrentTodo(null); // Reset currentTodo after successful operation
    } catch (error) {
      console.error('Error in API call:', error);
      alert('An error occurred while saving the todo.');
    }
  };


  const handleCancel = () => {
    setTodo(initialFormState); 
    setErrors({});
    setCurrentTodo(null); 
    navigate('/todos'); 
  };

 
 

  return (
    <div>
     
      <h2>{currentTodo ? 'Update Todo' : 'Add Todo'}</h2>

      <div className='todoForm'>
      <form onSubmit={handleSubmit}>
        <div>
          <label className='nameLabelTitle'>Name</label><br />
          <input
            type="text"
            name="name"
            value={todo.name}
            onChange={handleInputChange}
          /><br/>
          {errors.name && <span className="error">{errors.name}</span>}
        </div>

        <div>
          <label className='mobileLabelTitle'>Mobile</label><br />
          <input
            type="tel"
            name="mobile"
            value={todo.mobile}
            onChange={handleInputChange}
          /><br/>
          {errors.mobile && <span className="error">{errors.mobile}</span>}
        </div>

        <div>
          <label className='emailLabelTitle'>Email</label><br />
          <input
            type="email"
            name="email"
            value={todo.email}
            onChange={handleInputChange}
          /><br/>
          {errors.email && <span className="error">{errors.email}</span>}
        </div>

        <div>
          <label className='authorLabelTitle'>Author</label><br />
          <input
            type="text"
            name="author"
            value={todo.author}
            onChange={handleInputChange}
          /><br/>
          {errors.author && <span className="error">{errors.author}</span>}
        </div>

        <div>
          <label className='locationLabelTitle'>Location</label><br />
          <select
            name="location"
            value={todo.location}
            onChange={handleInputChange}
            className='locationInput'
          >
            <option className='locationInput' value="">Select a location</option>
            {locations.map((location, index) => (
              <option key={index} value={location}>
                {location}
              </option>
            ))}
          </select><br/>
          {errors.location && <span className="error">{errors.location}</span>}
        </div>

        <button type="submit" className='createButton'>
          {currentTodo ? 'Update Todo' : 'Create Todo'}
        </button><br/>
        <button type="button" className='cancelButton' onClick={handleCancel}>
                Cancel
            </button>
      </form>
      </div>
    </div>
  );
};

export default TodoForm;


//components/TodoForm/TodoForm.css


.todoForm{
    box-sizing: border-box;
    border: 2px solid white;
    background-color: rgb(223, 210, 194);
    width: 25%;
    height: 50%;
    margin-left: 35%;
    margin-top: 3%;
    border-radius: 5%;
    font-family: "Poppins", sans-serif;
}
.nameLabelTitle{
    margin-right: 46%;
}
.mobileLabelTitle{
    margin-right: 46%;
}
.emailLabelTitle{
    margin-right: 46%;
}
.authorLabelTitle{
    margin-right: 46%;
}
.locationLabelTitle{
    margin-right: 40%;
}
.locationInput{
    width: 60%;
    padding: 1%;
}
.createButton{
    border-radius: 10%;
    margin-top: 2%;
    width: 35%;
}
.cancelButton{
    border-radius: 10%;
    margin-top: 2%;
    width: 35%;
}


//components/Services/service.js

import axios from 'axios';


 // Function to load todos

 const getAuthToken = () => {
  return localStorage.getItem('token');  // Adjust based on where you store the token
};

export  const fetchTodos = async (setTodos) => {
    try {
      const token = getAuthToken();
      const result = await axios.get(`http://localhost:3000/api/todo`,
         
        {
          headers: {
            Authorization: `Bearer ${token}`  // Attach token to the Authorization header
          }
    });

      setTodos(result.data.todos);

    } catch (err) {
      console.error(err);
    }
  };

  export const deleteTodo = async (id) => {
    try {
      const token = getAuthToken();
      const response = await axios.delete(`http://localhost:3000/api/todo/${id}`,
        {
          headers: {
            Authorization: `Bearer ${token}`  // Attach token to the Authorization header
          }
    });
      return response.data;
    } catch (error) {
      console.error("Error deleting todo:", error);
      throw error;
    }
  };
  export const handleCreate = async (todo) => {
    try {
      const token = getAuthToken();
        console.log('Creating Todo');
        await axios.post('http://localhost:3000/api/todo', todo,{

          headers: {
            Authorization: `Bearer ${token}`  // Attach token to the Authorization header
          } 
        });
        
      
    } catch (error) {
      console.error('Error updating Todo:', error);
    }
  };


  export const handleUpdate = async (todo,currentTodo) => {
    try {
     
      if (currentTodo?._id && todo) {
        const token = getAuthToken();
        console.log('Updating Todo');
        await axios.put(`http://localhost:3000/api/todo/${currentTodo._id}`, todo, {
          headers: {
            Authorization: `Bearer ${token}`  // Attach token to the Authorization header
          }
        });
        
      }
    } catch (error) {
      console.error('Error updating Todo:', error);
    }
  };


  export const handleRegister = async (user) => {
    try {
      const response = await axios.post('http://localhost:3000/api/users', user);

      return response.data; 
    } catch (error) {
      console.error('Error Register:', error);
      throw error; 
    }
  };

  export const handleLogin = async (user) => {
    try {
      const response = await axios.post('http://localhost:3000/api/users/login', user);
      const { token } = response.data;

      localStorage.setItem("token", token);
      
      return response.data; 
    } catch (error) {
      console.error('Error Login:', error);
      throw error;
    }
  };


  export const fetchUserDetails = async (setUserName) => {
    try {
      const token = getAuthToken();
        const response = await axios.get('http://localhost:3000/api/users/me', {
            headers: { Authorization: `Bearer ${token}` },
        });
        setUserName(response.data.name);
    } catch (error) {
        console.error("Failed to fetch user details", error);
    }
};

//components/User/Register.js


import React, { useState, useMemo } from 'react';
import { handleRegister } from '../Services/service';
import { useNavigate } from 'react-router-dom';
import './Register.css'



const Register = () => {


    const initialFormState = useMemo(
        () => ({ id: null, name: '', email: '', password: '' }),
        []
    );

    const [user, setUser] = useState(initialFormState);
    const [errors, setErrors] = useState({});

    const handleInputChange = (event) => {
        const { name, value } = event.target;
        setUser({ ...user, [name]: value });
    };
    const navigate = useNavigate();

    const validateForm = (user) => {
        let errors = {};
        if (!user.name) errors.name = 'Name is required';
        if (!user.email) errors.email = 'Email is required';
        if (!user.password) errors.password = 'Password is required';
        return errors;
    };

    const handleSubmit = async (event) => {
        event.preventDefault();
      
        const formErrors = validateForm(user);
        if (Object.keys(formErrors).length > 0) {
          setErrors(formErrors); // Set validation errors if any
          return;
        }
      
        try {
          await handleRegister(user);
          alert('Registration successful!'); // Notify user on success
          setUser(initialFormState); // Reset form after successful registration
          setErrors({});
          navigate('/login');
        } catch (error) {
          if (error.response && error.response.data.message) {
            alert(error.response.data.message); // Show server-side error
          } else {
            alert('An error occurred during registration.'); // Generic fallback
          }
        }
      };
      

    return (
        <div className='resgisterBox'>

            <form onSubmit={handleSubmit}>
                <div>
                    <label className='nameLabel'>Name</label><br />
                    <input
                        type="text"
                        name="name"
                        value={user.name}
                        onChange={handleInputChange}
                        className='nameInput'
                       
                    /><br/>
                    {errors.name && <span className="error">{errors.name}</span>}
                </div>
                <div>
                    <label className='emailLabel'>Email</label><br />
                    <input
                        type="email"
                        name="email"
                        value={user.email}
                        onChange={handleInputChange}
                    /><br/>
                    {errors.email && <span className="error">{errors.email}</span>}
                </div>

                <div>
                    <label className='passwordLabel'>Password</label><br />
                    <input
                        type="text"
                        name="password"
                        value={user.password}
                        onChange={handleInputChange}
                    /><br/>
                    {errors.password && <span className="error">{errors.password}</span>}
                </div>


                <button type="submit" to='/login' className='registerButton'>
                    Register
                </button>
            </form>

        </div>
    )
}

export default Register


//components/User/Register.css



.resgisterBox{
    box-sizing: border-box;
    border: 2px solid white;
    background-color: rgb(223, 210, 194);
    width: 25%;
    height: 35%;
    margin-left: 35%;
    margin-top: 3%;
    border-radius: 5%;
    font-family: "Poppins", sans-serif;
}

.nameLabel {
    margin-right: 47%;
}
.emailLabel{
    margin-right: 47%;
}
.passwordLabel {
    margin-right: 39%;
}
.registerButton{
    border-radius: 10%;
    margin-top: 2%;
    width: 35%;
}
.error{
    color: brown;
}



//components/User/Login.js


import React, { useState, useMemo } from 'react';
import { handleLogin } from '../Services/service';
import { useNavigate } from 'react-router-dom';
import './Login.css'


const Login = () => {
    const navigate = useNavigate();


    const initialFormState = useMemo(
        () => ({ id: null,  email: '', password: '' }),
        []
    );

    const [user, setUser] = useState(initialFormState);
    const [errors, setErrors] = useState({});

    const handleInputChange = (event) => {
        const { name, value } = event.target;
        setUser({ ...user, [name]: value });
    };

    const validateForm = (user) => {
        let errors = {};
        if (!user.email) errors.email = 'Email is required';
        if (!user.password) errors.password = 'Password is required';
        return errors;
    };

    const handleSubmit = async (event) => {
        event.preventDefault();
      
        const formErrors = validateForm(user);
        if (Object.keys(formErrors).length > 0) {
          setErrors(formErrors); // Set validation errors if any
          return;
        }
      
        try {
          await handleLogin(user);
          alert('Login Succesful!');
           // Notify user on success
          setUser(initialFormState); // Reset form after successful registration
          setErrors({});
          navigate('/todos');
        } catch (error) {
          if (error.response && error.response.data.message) {
            alert(error.response.data.message); // Show server-side error
          } else {
            alert('An error occurred during registration.'); // Generic fallback
          }
        }
      };
      

    return (
        <div className='loginBox'>

            <form onSubmit={handleSubmit}>
                <div>
                    <label className='emailLabels'>Email</label><br />
                    <input
                        type="email"
                        name="email"
                        value={user.email}
                        onChange={handleInputChange}
                    /><br/>
                    {errors.email && <span className="error">{errors.email}</span>}
                </div>

                <div>
                    <label className='passwordLabels'>Password</label><br />
                    <input
                        type="text"
                        name="password"
                        value={user.password}
                        onChange={handleInputChange}
                    /><br/>
                    {errors.password && <span className="error">{errors.password}</span>}
                </div>


                <button type="submit" className='loginButton'>
                    Login
                </button>
            </form>

        </div>
    )
}

export default Login

//Components/User/Login.css

.loginBox{
    box-sizing: border-box;
    border: 2px solid white;
    background-color: rgb(223, 210, 194);
    width: 25%;
    height: 35%;
    margin-left: 35%;
    margin-top: 3%;
    border-radius: 5%;
    font-family: "Poppins", sans-serif;
}

.emailLabels{
    margin-right: 48%;
}
.passwordLabels{
    margin-right: 39%;
}
.loginButton{
    border-radius: 10%;
    margin-top: 2%;
    width: 35%;
}

.error{
    color: brown;
}

//components/Header/Header.js


import React, { useEffect, useState } from "react";
import "./Header.css";
import { Link } from "react-router-dom";
import { useNavigate } from 'react-router-dom';
import { fetchUserDetails } from "../Services/service";



const Header = () => {

    const getAuthToken = () => {
        return localStorage.getItem('token');
    };
    const token = getAuthToken();
    const navigate = useNavigate();
    const [userName, setUserName] = useState(null);



    const handleLogout = () => {


        localStorage.removeItem("token");
        


        const token = localStorage.getItem("token");

        if (!token) {
            console.log("Token successfully removed.");
            navigate('/login');
        } else {
            console.log("Token removal failed.");
        }
    };

    useEffect(() => {
        if (token) {
           
            fetchUserDetails(setUserName);
        }
    }, [token]);
    
    


    return (
        <div className="header">
            <div className="logo">
                <h3>Logo</h3>
            </div>
            <div className="menu">
                <nav>
                    <ul>
                        {token ? (
                            <>
                                <li>
                                <span>{userName}</span> 
                                </li>
                                <li>
                                    <Link to="/todos">Todos</Link>
                                </li>
                                <li>
                                    <Link to="/logout" onClick={handleLogout}>
                                        Logout
                                    </Link>
                                </li>
                            </>
                        ) : (
                            <>
                                <li>
                                    <Link to="/">Register</Link>
                                </li>
                                <li>
                                    <Link to="/login" >
                                        Login
                                    </Link>
                                </li>
                            </>
                        )}
                    </ul>
                </nav>
            </div>
        </div>
    );
};

export default Header;


//components/Header/Header.css

*{
margin: 0;
padding: 0;
}
.header{
    display: table;
    width: 100%;
    background-color:rgba(0, 0, 0, 0.096);
}

.log{
    width: 50%;
    float: left;
    
}
.menu {
    width: 30%;
    float: right;
    margin-top: -35px;
    margin-right: 8%;
    
}
.menu nav ul li {
   list-style: none;
   text-decoration: none;
    display: inline;
    font-size: 25px;
    padding-left: 20px;
}
.menu nav ul li a {
    text-decoration: none;
    color: black;
  }

.logo h3 {
    font-size: 30px;
    padding-right: 80%;
}


//components/Footer/Footer.js

import React from 'react';
import './Footer.css';

const Footer = () => {
  return (
    <div >
        <small className="mt-5 footer">
      Copyright © 2024  History Archives. All Rights Reserved.
    </small>

    </div>
  )
}

export default Footer

//App.js

import './App.css';
import TodoTable from './components/TodoTable/TodosTable';
import Register from './components/User/Register';
import Login from './components/User/Login';
import { BrowserRouter as Router, Routes, Route } from 'react-router-dom';
import Header from './components/Header/Header';
import Footer from './components/Footer/Footer';

function App() {
  return (
    <div className="App">
     
      <Router>
        <Header />
        <div className="content">
          <Routes>
            <Route path="/" element={<Register />} />
            <Route path="/login" element={<Login />} />
            <Route path="/todos" element={<TodoTable />} />
            <Route path="/logout" element={<Login />} />
          </Routes>
        </div>
        <Footer/>
      </Router>
    </div>
  );
}

export default App;







  
  
  


 
  
 




